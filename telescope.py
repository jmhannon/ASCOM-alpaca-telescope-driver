
# -*- coding: utf-8 -*-
#
# -----------------------------------------------------------------------------
# telescope.py - Alpaca API responders for Telescope
#
# Author:   Your R. Name <your@email.org> (abc)
#
# -----------------------------------------------------------------------------
# Edit History:
#   Generated by Python Interface Generator for AlpycaDevice
#
# ??-???-????   abc Initial edit
from datetime import datetime
from pytz import timezone
from falcon import Request, Response, HTTPBadRequest, before
from logging import Logger
from shr import PropertyResponse, MethodResponse, PreProcessRequest, \
                get_request_field, to_bool
from exceptions import *        # Nothing but exception classes
from config import Config
import os
import time
import re

#    TS_STOPPED = 0        /* telescope motionless; no updates occuring */
#    TS_HUNTING = 1        /* searching for tra/dec, then track */
#    TS_TRACKING = 2        /* tracking object at tra/tdec */
#    TS_SLEWING = 3         /* searching for tha/tdec, then stop */
#    TS_HOMING = 4          /* finding home positions */
#    TS_LIMITING = 5        /* finding limit positions */

logger: Logger = None
numbers = re.compile (r'[0-9\-\.]+')
PI = 3.141592653589793
MJD0 = 2415020.0
# ----------------------
# MULTI-INSTANCE SUPPORT
# ----------------------
# If this is > 0 then it means that multiple devices of this type are supported.
# Each responder on_get() and on_put() is called with a devnum parameter to indicate
# which instance of the device (0-based) is being called by the client. Leave this
# set to 0 for the simple case of controlling only one instance of this device type.
#
maxdev = 0                      # Single instance
tconnected = True
AThome = False # set to false with any slew operation
targetRA = 1000.0
targetDEC = 1000.0


# Define the paths for the two named pipes 
pipe_in_path = Config.pipe_in_path
pipe_out_path = Config.pipe_out_path
# -----------
# DEVICE INFO
# -----------
# Static metadata not subject to configuration changes
## EDIT FOR YOUR DEVICE ##
class TelescopeMetadata:
    """ Metadata describing the Telescope Device. Edit for your device"""
    Name = 'Rigel Telescope'
    Version = '010'
    Description = 'Rigel  ASCOM Telescope'
    DeviceType = 'Telescope'
    DeviceID = 'dacc2515-9570-4e9d-9912-fcb213156c37' 
    Info = 'Cedar Amateur Astronomers Rigel robotic telescope'
    MaxDeviceNumber = maxdev
    InterfaceVersion = 1

# --------------------
# RESOURCE CONTROLLERS
# --------------------

@before(PreProcessRequest(maxdev))
class action:
    def on_put(self, req: Request, resp: Response, devnum: int):
        resp.text = MethodResponse(req, NotImplementedException()).json

@before(PreProcessRequest(maxdev))
class commandblind:
    def on_put(self, req: Request, resp: Response, devnum: int):
        resp.text = MethodResponse(req, NotImplementedException()).json

@before(PreProcessRequest(maxdev))
class commandbool:
    def on_put(self, req: Request, resp: Response, devnum: int):
        resp.text = MethodResponse(req, NotImplementedException()).json

@before(PreProcessRequest(maxdev))
class commandstring:
    def on_put(self, req: Request, resp: Response, devnum: int):
        resp.text = MethodResponse(req, NotImplementedException()).json

@before(PreProcessRequest(maxdev))
class connected:
    def on_get(self, req: Request, resp: Response, devnum: int):
              # flush fifo
            os_read_from_pipe()
            write_to_pipe('reset\n')
            time.sleep(.001)
            response = os_read_from_pipe()   
            print('reset response ',response) # jmh debug
            reply = numbers.findall(response)
            if (reply[0]== '0'): # getting an empty response from reset jmh need to figure out
             global tconnected
             tconnected = True
            else:
              tconnected = True                       
            # ------------------------------- fix this jmh
            resp.text = PropertyResponse(tconnected, req).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        conn_str = get_request_field('Connected', req)
        global tconnected
        tconnected = to_bool(conn_str)        # Raises 400 Bad Request if str to bool fails
        global targetRA
        global targetDEC
        targetRA = 1000.0
        targetDEC = 1000.0
        try:
            # --------------------------------
            # not sure if I actually want to "connect" here maybe just send Reset jmh 
            ### CONNECT/DISCONNECT()PARAM) ###
            # --------------------------------
           resp.text = MethodResponse(req).json
        except Exception as ex:
            DriverException(0x500, 'Telescope.{Memname} failed', ex).json

@before(PreProcessRequest(maxdev))
class description:
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(TelescopeMetadata.Description, req).json

@before(PreProcessRequest(maxdev))
class driverinfo:
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(TelescopeMetadata.Info, req).json

@before(PreProcessRequest(maxdev))
class interfaceversion:
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(TelescopeMetadata.InterfaceVersion, req).json

@before(PreProcessRequest(maxdev))
class driverversion():
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(TelescopeMetadata.Version, req).json

@before(PreProcessRequest(maxdev))
class name():
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(TelescopeMetadata.Name, req).json

@before(PreProcessRequest(maxdev))
class supportedactions:
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse([], req).json  # Not PropertyNotImplemented

@before(PreProcessRequest(maxdev))
class alignmentmode:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not True: # don't need to be connected
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = 1  # algPolar
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Alignmentmode failed', ex)).json

@before(PreProcessRequest(maxdev))
class altitude:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tconnected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:            
            # flush fifo
            os_read_from_pipe()
            write_to_pipe("getaltaz\n")
            time.sleep(.001)
            response = os_read_from_pipe()   
            radec = numbers.findall(response) # jmh debug           
            val = float(radec[1])        
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Altitude failed', ex)).json

@before(PreProcessRequest(maxdev))
class aperturearea:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not True:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = Config.ApertureArea 
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Aperturearea failed', ex)).json

@before(PreProcessRequest(maxdev))
class aperturediameter:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not True:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = Config.ApertureDiameter
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Aperturediameter failed', ex)).json

@before(PreProcessRequest(maxdev))
class athome:
# not sure this can be figured out ??
    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tconnected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = AThome # decide what to do here jmh
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Athome failed', ex)).json

@before(PreProcessRequest(maxdev))
class atpark:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not False:
            resp.text = MethodResponse(req, NotImplementedException()).json
            return
        try:
            # ----------------------
            val =0 ## GET PROPERTY from ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Atpark failed', ex)).json

@before(PreProcessRequest(maxdev))
class azimuth:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tconnected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:          
            # flush fifo
            os_read_from_pipe()
            write_to_pipe("getaltaz\n")
            time.sleep(.001)
            response = os_read_from_pipe()   
            altaz = numbers.findall(response)
            val =float(altaz[2])                                  
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Azimuth failed', ex)).json

@before(PreProcessRequest(maxdev))
class canfindhome:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not True:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = True
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Canfindhome failed', ex)).json

@before(PreProcessRequest(maxdev))
class canpark:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not True:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = True
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Canpark failed', ex)).json

@before(PreProcessRequest(maxdev))
class canpulseguide:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not True:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = False
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Canpulseguide failed', ex)).json

@before(PreProcessRequest(maxdev))
class cansetdeclinationrate:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not True:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = False
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Cansetdeclinationrate failed', ex)).json

@before(PreProcessRequest(maxdev))
class cansetguiderates:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not True:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = False
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Cansetguiderates failed', ex)).json

@before(PreProcessRequest(maxdev))
class cansetpark:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not True:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = False
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Cansetpark failed', ex)).json

@before(PreProcessRequest(maxdev))
class cansetpierside:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not True:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = False
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Cansetpierside failed', ex)).json

@before(PreProcessRequest(maxdev))
class cansetrightascensionrate:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not True:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = False
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Cansetrightascensionrate failed', ex)).json

@before(PreProcessRequest(maxdev))
class cansettracking:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not True:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = False
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Cansettracking failed', ex)).json

@before(PreProcessRequest(maxdev))
class canslew:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not True:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = False
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Canslew failed', ex)).json

@before(PreProcessRequest(maxdev))
class canslewaltaz:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not True:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ---------------------- Think this is sync slew Don't want to use sync.
            val = False
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Canslewaltaz failed', ex)).json

@before(PreProcessRequest(maxdev))
class canslewaltazasync:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not True:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = True
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Canslewaltazasync failed', ex)).json

@before(PreProcessRequest(maxdev))
class canslewasync:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not True:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = True
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Canslewasync failed', ex)).json

@before(PreProcessRequest(maxdev))
class cansync:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not True:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = False
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Cansync failed', ex)).json

@before(PreProcessRequest(maxdev))
class cansyncaltaz:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not True:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = False
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Cansyncaltaz failed', ex)).json

@before(PreProcessRequest(maxdev))
class canunpark:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not True:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = False
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Canunpark failed', ex)).json

@before(PreProcessRequest(maxdev))
class declination:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tconnected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
                  # flush fifo
            os_read_from_pipe()
            write_to_pipe("getradec\n")
            time.sleep(.001)
            response = os_read_from_pipe()   
            radec = numbers.findall(response)
            val = float(radec[2])                                         
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Declination failed', ex)).json

@before(PreProcessRequest(maxdev))
class declinationrate:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tconnected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = 0 
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Declinationrate failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not False:
            resp.text = MethodResponse(req, NotImplementedException()).json
            return
        declinationratestr = get_request_field('DeclinationRate', req)      # Raises 400 bad request if missing
        try:
            declinationrate = float(declinationratestr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'DeclinationRate " + declinationratestr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###         # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Declinationrate failed', ex)).json

@before(PreProcessRequest(maxdev))
class doesrefraction:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not True:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = True  # I think this is true ??
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Doesrefraction failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not False:
            resp.text = MethodResponse(req, NotImplementedException()).json
            return
        doesrefractionstr = get_request_field('DoesRefraction', req)      # Raises 400 bad request if missing
        doesrefraction = to_bool(doesrefractionstr)                       # Same here

        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Doesrefraction failed', ex)).json

@before(PreProcessRequest(maxdev))
class equatorialsystem:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not True:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = 'J2000' # ?? what exactly is supposed to be returned?
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Equatorialsystem failed', ex)).json

@before(PreProcessRequest(maxdev))
class focallength:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not True:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = Config.FocalLength
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Focallength failed', ex)).json

@before(PreProcessRequest(maxdev))
class guideratedeclination:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not False:
            resp.text = MethodResponse(req, NotImplementedException()).json
            return
        try:
            # ----------------------
            val = 0 ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Guideratedeclination failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not False:
            resp.text = MethodResponse(req, NotImplementedException()).json
            return
        guideratedeclinationstr = get_request_field('GuideRateDeclination', req)      # Raises 400 bad request if missing
        try:
            guideratedeclination = float(guideratedeclinationstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'GuideRateDeclination " + guideratedeclinationstr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###         # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Guideratedeclination failed', ex)).json

@before(PreProcessRequest(maxdev))
class guideraterightascension:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not False:
            resp.text = MethodResponse(req, NotImplementedException()).json
            return
        try:
            # ----------------------
            val =  0 ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Guideraterightascension failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not False:
            resp.text = MethodResponse(req, NotImplementedException()).json
            return
        guideraterightascensionstr = get_request_field('GuideRateRightAscension', req)      # Raises 400 bad request if missing
        try:
            guideraterightascension = float(guideraterightascensionstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'GuideRateRightAscension " + guideraterightascensionstr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###         # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Guideraterightascension failed', ex)).json

@before(PreProcessRequest(maxdev))
class ispulseguiding:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not True:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = False
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Ispulseguiding failed', ex)).json

@before(PreProcessRequest(maxdev))
class rightascension:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tconnected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
                 # flush fifo
            os_read_from_pipe()
            write_to_pipe("getradec\n")
            time.sleep(.001)
            response = os_read_from_pipe()   
            radec = numbers.findall(response)
            val = float(radec[1])                               
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Rightascension failed', ex)).json

@before(PreProcessRequest(maxdev))
class rightascensionrate:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tconnected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = 0 
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Rightascensionrate failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not False:
            resp.text = MethodResponse(req, NotImplementedException()).json
            return
        rightascensionratestr = get_request_field('RightAscensionRate', req)      # Raises 400 bad request if missing
        try:
            rightascensionrate = float(rightascensionratestr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'RightAscensionRate " + rightascensionratestr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###         # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Rightascensionrate failed', ex)).json

@before(PreProcessRequest(maxdev))
class sideofpier:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not False:
            resp.text = MethodResponse(req, NotImplementedException()).json
            return
        try:
            # ----------------------
            val = 0 ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Sideofpier failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not False:
            resp.text = MethodResponse(req, NotImplementedException()).json
            return
        sideofpierstr = get_request_field('SideOfPier', req)      # Raises 400 bad request if missing
        try:
            sideofpier = int(sideofpierstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'SideOfPier " + sideofpierstr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###          # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Sideofpier failed', ex)).json

@before(PreProcessRequest(maxdev))
class siderealtime:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tconnected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # don't know how to convert mjd to sidreal time
                    # flush fifo
            os_read_from_pipe()
            write_to_pipe("getmjd\n")
            time.sleep(.001)
            response = os_read_from_pipe()   
            radec = numbers.findall(response)           
            val = float(radec[1]) + MJD0     
             # convert JD to sidreal time
            GMST = 18.697374558 + 24.06570982441908*(val - 2451545)
            GMST = GMST % 24    #use modulo operator to convert to 24 hours
            LST =GMST + (Config.SiteLongitude/15)
            if LST < 0:
                LST = LST + 24
            print('LST ',LST)    # jmh debug                  
            resp.text = PropertyResponse(LST, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Siderealtime failed', ex)).json

@before(PreProcessRequest(maxdev))
class siteelevation:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not True:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = Config.SiteElevation
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Siteelevation failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not False:
            resp.text = MethodResponse(req, NotImplementedException()).json
            return
        siteelevationstr = get_request_field('SiteElevation', req)      # Raises 400 bad request if missing
        try:
            siteelevation = float(siteelevationstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'SiteElevation " + siteelevationstr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###         # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Siteelevation failed', ex)).json

@before(PreProcessRequest(maxdev))
class sitelatitude:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not True:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = Config.SiteLatitude
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Sitelatitude failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not False: 
            resp.text = MethodResponse(req, NotImplementedException()).json
            return
        sitelatitudestr = get_request_field('SiteLatitude', req)      # Raises 400 bad request if missing
        try:
            sitelatitude = float(sitelatitudestr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'SiteLatitude " + sitelatitudestr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###         # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Sitelatitude failed', ex)).json

@before(PreProcessRequest(maxdev))
class sitelongitude:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not True:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = Config.SiteLongitude
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Sitelongitude failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not False:
            resp.text = MethodResponse(req, NotImplementedException()).json
            return
        sitelongitudestr = get_request_field('SiteLongitude', req)      # Raises 400 bad request if missing
        try:
            sitelongitude = float(sitelongitudestr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'SiteLongitude " + sitelongitudestr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###         # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Sitelongitude failed', ex)).json

@before(PreProcessRequest(maxdev))
class slewing:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tconnected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # flush fifo
            os_read_from_pipe()
            write_to_pipe("gettelstate\n")
            time.sleep(.001)
            response = os_read_from_pipe()   
            print('Is slewing response', response) # jmh debug
            tstate = numbers.findall(response)
            if ((tstate[1]== '3') or tstate[1]== 1): # hunting or slewing
              val = True
            else:
              val = False              
            
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Slewing failed', ex)).json

@before(PreProcessRequest(maxdev))
class slewsettletime:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not False:
            resp.text = MethodResponse(req, NotImplementedException()).json
            return
        try:
            # ----------------------
            val = 0 ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Slewsettletime failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not False:
            resp.text = MethodResponse(req, NotImplementedException()).json
            return
        slewsettletimestr = get_request_field('SlewSettleTime', req)      # Raises 400 bad request if missing
        try:
            slewsettletime = int(slewsettletimestr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'SlewSettleTime " + slewsettletimestr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###          # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Slewsettletime failed', ex)).json

@before(PreProcessRequest(maxdev))
class targetdeclination:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tconnected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:                      
            val = targetDEC    
            if ((val < -90) or (val > 90) ):   
              resp.text = MethodResponse(req,
                            ValueNotSetException(f'Declination not set.')).json
              return        
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Targetdeclination failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tconnected:
             resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
             return
        targetdeclinationstr = get_request_field('TargetDeclination', req)      # Raises 400 bad request if missing
        try:
            targetdeclination = float(targetdeclinationstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'TargetDeclination " + targetdeclinationstr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###         # Raise Alpaca InvalidValueException with details!
        if ((targetdeclination < -90) or (targetdeclination > 90) ):
          resp.text = MethodResponse(req,
                            InvalidValueException(f'Declination " + declinationstr + " not in range.')).json
          return
        try:
            global targetDEC
            targetDEC = targetdeclination
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Targetdeclination failed', ex)).json

@before(PreProcessRequest(maxdev))
class targetrightascension:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tconnected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:           
            val = targetRA      
            if ((val < 0) or (val >= 24) ):
               resp.text = MethodResponse(req,
                            ValueNotSetException(f'RA not set.')).json
               return
            print("targetRA in get target ra",val)  # jmh debug  
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Targetrightascension failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tconnected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        targetrightascensionstr = get_request_field('TargetRightAscension', req)
        try:
            targetrightascension = float(targetrightascensionstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'TargetRightAscension " + targetrightascensionstr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###         # Raise Alpaca InvalidValueException with details!       
        if ((targetrightascension < 0) or (targetrightascension >= 24) ):
          resp.text = MethodResponse(req,
                            InvalidValueException(f'RA " + rightascension + " not in range.')).json
          return
        try:
            global targetRA
            targetRA =  targetrightascension
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Targetrightascension failed', ex)).json

@before(PreProcessRequest(maxdev))
class tracking:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not tconnected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
             # flush fifo
            os_read_from_pipe()
            write_to_pipe("gettelstate\n")
            time.sleep(.001)
            response = os_read_from_pipe()   
            print('response from is tracking',response)
            tstate = numbers.findall(response)
            if (tstate[1]== '2'):
              val = True
            else:
              val = False              
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Tracking failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not False:
            resp.text = MethodResponse(req, NotImplementedException()).json
            return
        trackingstr = get_request_field('Tracking', req)      # Raises 400 bad request if missing
        tracking = to_bool(trackingstr)                       # Same here

        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Tracking failed', ex)).json

@before(PreProcessRequest(maxdev))
class trackingrate:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not False:
            resp.text = MethodResponse(req, NotImplementedException()).json
            return
        try:
            # ----------------------
            val = 0 ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Trackingrate failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not False:
            resp.text = MethodResponse(req, NotImplementedException()).json
            return
        trackingratestr = get_request_field('TrackingRate', req)      # Raises 400 bad request if missing
        try:
            trackingrate = int(trackingratestr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'TrackingRate " + trackingratestr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###          # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Trackingrate failed', ex)).json

@before(PreProcessRequest(maxdev))
class trackingrates:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not False:
            resp.text = MethodResponse(req, NotImplementedException()).json
            return
        try:
            # ----------------------
            val = 0 ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Trackingrates failed', ex)).json

@before(PreProcessRequest(maxdev))
class utcdate:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not True:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            utcnow = datetime.now(timezone ('UTC'))
            val = utcnow.strftime("%Y-%m-%dT%H:%M:%S.%fZ")
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Utcdate failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not False:
            resp.text = MethodResponse(req, NotImplementedException()).json
            return

@before(PreProcessRequest(maxdev))
class abortslew:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tconnected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
              # flush fifo
            os_read_from_pipe()
            write_to_pipe('Stop\n')
            time.sleep(.001)
            response = os_read_from_pipe()   
            print('stop response ',response) # jmh debug
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Abortslew failed', ex)).json

@before(PreProcessRequest(maxdev))
class axisrates:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not False:
            resp.text = MethodResponse(req, NotImplementedException()).json
            return
        try:
            # ----------------------
            val = 0 ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Axisrates failed', ex)).json

@before(PreProcessRequest(maxdev))
class canmoveaxis:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not False:
            resp.text = MethodResponse(req, NotImplementedException()).json
            return
        try:
            # ----------------------
            val = 0 ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Canmoveaxis failed', ex)).json

@before(PreProcessRequest(maxdev))
class destinationsideofpier:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not False:
            resp.text = MethodResponse(req, NotImplementedException()).json
            return
        try:
            # ----------------------
            val = 0 ## GET PROPERTY ##
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Telescope.Destinationsideofpier failed', ex)).json

@before(PreProcessRequest(maxdev))
class findhome:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tconnected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
              # flush fifo
            os_read_from_pipe()
            write_to_pipe('home\n')
            time.sleep(.001)
            response = os_read_from_pipe()   
            print('find home response ',response) # jmh debug
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Findhome failed', ex)).json
        global AThome # may need to change this jmh
        AThome = True
              

@before(PreProcessRequest(maxdev))
class moveaxis:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not False:
            resp.text = MethodResponse(req, NotImplementedException()).json
            return
        axisstr = get_request_field('Axis', req)      # Raises 400 bad request if missing
        try:
            axis = int(axisstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Axis " + axisstr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###          # Raise Alpaca InvalidValueException with details!
        ratestr = get_request_field('Rate', req)      # Raises 400 bad request if missing
        try:
            rate = float(ratestr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Rate " + ratestr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###         # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Moveaxis failed', ex)).json

@before(PreProcessRequest(maxdev))
class park:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tconnected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            global AThome
            AThome = False
               # flush fifo
            os_read_from_pipe()
            write_to_pipe('Stow\n')
            time.sleep(.001)
            response = os_read_from_pipe()   
            print('stow response ',response) # jmh debug
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Park failed', ex)).json

@before(PreProcessRequest(maxdev))
class pulseguide:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not False:
            resp.text = MethodResponse(req, NotImplementedException()).json
            return
        directionstr = get_request_field('Direction', req)      # Raises 400 bad request if missing
        try:
            direction = int(directionstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Direction " + directionstr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###          # Raise Alpaca InvalidValueException with details!
        durationstr = get_request_field('Duration', req)      # Raises 400 bad request if missing
        try:
            duration = int(durationstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Duration " + durationstr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###          # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Pulseguide failed', ex)).json

@before(PreProcessRequest(maxdev))
class setpark:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not False:
            resp.text = MethodResponse(req, NotImplementedException()).json
            return
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Setpark failed', ex)).json

@before(PreProcessRequest(maxdev))
class slewtoaltaz:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not False:
            resp.text = MethodResponse(req, NotImplementedException()).json
            return
        azimuthstr = get_request_field('Azimuth', req)      # Raises 400 bad request if missing
        try:
            azimuth = int(azimuthstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Azimuth " + azimuthstr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###       # Raise Alpaca InvalidValueException with details!
        altitudestr = get_request_field('Altitude', req)      # Raises 400 bad request if missing
        try:
            altitude = int(altitudestr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Altitude " + altitudestr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###       # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Slewtoaltaz failed', ex)).json

@before(PreProcessRequest(maxdev))
class slewtoaltazasync:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tconnected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        azimuthstr = get_request_field('Azimuth', req)      # Raises 400 bad request if missing
        try:
            azimuth = float(azimuthstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Azimuth " + azimuthstr + " not a valid number.')).json
            return
        if ((azimuth < 0) or (azimuth >= 360) ):
          resp.text = MethodResponse(req,
                            InvalidValueException(f'Azimuth " + azimuthstr + " not in range.')).json
          return
        altitudestr = get_request_field('Altitude', req)      # Raises 400 bad request if missing
        try:
            altitude = float(altitudestr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Altitude " + altitudestr + " not a valid number.')).json
            return
        if((altitude < 0) or (altitude >= 90)):
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Altitude " + altitudestr + " not in range.')).json
        try:
           global AThome
           AThome = False
           rad_altitude = altitude * (PI/180.0) # convert degees to radians
           rad_azimuth = azimuth * (PI/180.0)
           msg = "Alt:{:.6f} Az:{:.6f}\n".format(rad_altitude, rad_azimuth)
            # flush fifo
           os_read_from_pipe()
           write_to_pipe(msg)
           time.sleep(.001)
           response = os_read_from_pipe()   
           print("altaz response: ", response) # jmh debug
           resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Slewtoaltazasync failed', ex)).json

@before(PreProcessRequest(maxdev))
class slewtocoordinates:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not False:
            resp.text = MethodResponse(req, NotImplementedException()).json
            return
        rightascensionstr = get_request_field('RightAscension', req)      # Raises 400 bad request if missing
        try:
            rightascension = int(rightascensionstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'RightAscension " + rightascensionstr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###       # Raise Alpaca InvalidValueException with details!
        declinationstr = get_request_field('Declination', req)      # Raises 400 bad request if missing
        try:
            declination = int(declinationstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Declination " + declinationstr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###       # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Slewtocoordinates failed', ex)).json

@before(PreProcessRequest(maxdev))
class slewtocoordinatesasync:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tconnected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        rightascensionstr = get_request_field('RightAscension', req)      # Raises 400 bad request if missing
       
        print("right ascension in slew to cord ",rightascensionstr)
          #define	RADIANS(degrees)	((degrees) * (PI / 180.0))         
        try:
            rightascension = float(rightascensionstr)  # in hours
            global targetRA
            targetRA = rightascension
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'RightAscension " + rightascensionstr + " not a valid number.')).json
            return
        if ((rightascension < 0) or (rightascension >= 24) ):
          resp.text = MethodResponse(req,
                            InvalidValueException(f'RA " + rightascension + " not in range.')).json
          return
        declinationstr = get_request_field('Declination', req)      # Raises 400 bad request if missing
       
        try:          
            declination = float(declinationstr) # degrees
            global targetDEC
            targetDEC = declination
           
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Declination " + declinationstr + " not a valid number.')).json
            return
        if ((declination < -90) or (declination > 90) ):
          resp.text = MethodResponse(req,
                            InvalidValueException(f'Declination " + declinationstr + " not in range.')).json
          return
        try:
           global AThome
           AThome = False
           rad_ra = rightascension * (PI/12.0) # convert hours to radians
           rad_dec = declination * (PI/180.0)  # convert degees to radians
           msg = "RA:{:.6f} Dec:{:.6f}\n".format(rad_ra, rad_dec)
            # flush fifo
           os_read_from_pipe()
           write_to_pipe(msg)
           time.sleep(.001)
           response = os_read_from_pipe()   
           print("radec response: ", response) # jmh debug
           resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Slewtocoordinatesasync failed', ex)).json

@before(PreProcessRequest(maxdev))
class slewtotarget:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not False:
             resp.text = MethodResponse(req, NotImplementedException()).json
             return
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Slewtotarget failed', ex)).json

@before(PreProcessRequest(maxdev))
class slewtotargetasync:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not tconnected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            rightascension = targetRA  # in hours
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'RightAscension " + targetRA + " not a valid number.')).json
            return
        if ((rightascension < 0) or (rightascension >= 24) ):
          resp.text = MethodResponse(req,
                            InvalidValueException(f'RA " + rightascension + " not in range.')).json
          return
        try:
            declination = targetDEC # degrees
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Declination " + targetDEC + " not a valid number.')).json
            return
        if ((declination < -90) or (declination > 90) ):
          resp.text = MethodResponse(req,
                            InvalidValueException(f'Declination " + declination + " not in range.')).json
          return
        try:
           global AThome
           AThome = False 
           rad_ra = rightascension * (PI/12.0) # convert hours to radians
           rad_dec = declination * (PI/180.0)  # convert degees to radians
           msg = "RA:{:.6f} Dec:{:.6f}\n".format(rad_ra, rad_dec)
            # flush fifo
           os_read_from_pipe()
           write_to_pipe(msg)
           time.sleep(.001)
           response = os_read_from_pipe()   
           print("radec response: ", response) # jmh debug
           resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Slewtotargetasync failed', ex)).json

@before(PreProcessRequest(maxdev))
class synctoaltaz:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not False:
            resp.text = MethodResponse(req, NotImplementedException()).json
            return
        azimuthstr = get_request_field('Azimuth', req)      # Raises 400 bad request if missing
        try:
            azimuth = int(azimuthstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Azimuth " + azimuthstr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###       # Raise Alpaca InvalidValueException with details!
        altitudestr = get_request_field('Altitude', req)      # Raises 400 bad request if missing
        try:
            altitude = int(altitudestr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Altitude " + altitudestr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###       # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Synctoaltaz failed', ex)).json

@before(PreProcessRequest(maxdev))
class synctocoordinates:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not False:
            resp.text = MethodResponse(req, NotImplementedException()).json
            return
        rightascensionstr = get_request_field('RightAscension', req)      # Raises 400 bad request if missing
        try:
            rightascension = int(rightascensionstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'RightAscension " + rightascensionstr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###       # Raise Alpaca InvalidValueException with details!
        declinationstr = get_request_field('Declination', req)      # Raises 400 bad request if missing
        try:
            declination = int(declinationstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Declination " + declinationstr + " not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###       # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Synctocoordinates failed', ex)).json

@before(PreProcessRequest(maxdev))
class synctotarget:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not False:
            resp.text = MethodResponse(req, NotImplementedException()).json
            return
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Synctotarget failed', ex)).json

@before(PreProcessRequest(maxdev))
class unpark:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not False:
            resp.text = MethodResponse(req, NotImplementedException()).json
            return
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Telescope.Unpark failed', ex)).json

# Function to write data to the input pipe
def write_to_pipe(data):
    try:
        with open(pipe_in_path, "w", encoding="utf-8") as pipe_in:
            pipe_in.write(data)
    except Exception as e:
        raise Exception(f"Error writing to the input pipe: {e}")

def os_read_from_pipe():
    response = b''
    try:
      fd = os.open(pipe_out_path, os.O_RDONLY | os.O_NONBLOCK)  
      while 1:
       # need to break out of loop if no data avaliable after a time out or n tries ??
       data_byte = os.read(fd,1)
       if data_byte == '\x00':
          break
       response += data_byte      
    except Exception as e:
      pass # ignore any exceptions for now
     # raise Exception(f'Failed to read from os_read: {e}')
    return response.decode()  